// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  // url      = "mysql://lucile:Bm19962019!@SG-gravel-comic-4708-8547-mysql-master.servers.mongodirector.com:3306/lucile?schema=public"
}

model User {
  id     String @id @default(cuid())
  username String?
  first_name String
  surname String
  email String @unique
  phone_number String
  whatsapp_number String
  role Role   @default(USER)
  status Boolean @default(true)
  properties Property[]
  password String
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("user")
}

enum Role {
  AGENT
  ADMIN
  SUPER_ADMIN
  REALTOR
  USER
}

model Images {
  id String @id @default(cuid())
  image_name String
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("images")
}
model Location {
  id String @id @default(cuid())
  location_name String
  status Boolean @default(true)
  suburbs Suburbs[]
  properties Property[]
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("location")
}
model Suburbs {
  id String @id @default(cuid())
  suburb_name String
  status Boolean @default(true)
  location_id String
  property Property[]
  location Location @relation(fields: [location_id],references: [id])
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("suburbs")
}
model Property {
  id String @id @default(cuid())
  name String
  description String? @db.LongText
  address String?  @db.LongText
  owner_name String?
  refrence_code String?
  owner_email String?
  owner_phone String?
  showDate DateTime?
  showStartTime DateTime?
  showEndTime DateTime?
  on_show Boolean @default(false)
  amount Float
  listing_status ListingStatus @default(FOR_SALE)
  status propStatus  @default(LISTED)
  location_id String
  suburb_id String?
  features Features[]
  images Json?
  other_features Json?
  type_id String
  agent_id String
  suburb Suburbs? @relation(fields: [suburb_id],references: [id])
  location Location @relation(fields: [location_id],references: [id])
  agent User @relation(fields: [agent_id],references: [id])
  prop_type PropertyType @relation(fields: [type_id],references: [id])
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("property")
}

enum ListingStatus {
  FOR_SALE
  FOR_RENT
}

model Features {
  id String @id @default(cuid())
  name String?
  total Int?
  property_id String
  property Property @relation(fields: [property_id],references: [id])
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("features")
}

model PropertyType {
  id String @id @default(cuid())
  name String?
  property Property[]
  status Boolean @default(true)
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  @@map("propertytype")
}

enum propStatus {
  LISTED
  ARCHIVED
  SOLD
}